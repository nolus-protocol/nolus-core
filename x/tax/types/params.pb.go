// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nolus/tax/v1beta1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: please use the Params  message from v2.
// Params defines the parameters for the module.
//
// Deprecated: Do not use.
type Params struct {
	FeeRate         int32       `protobuf:"varint,1,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string      `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	BaseDenom       string      `protobuf:"bytes,3,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	FeeParams       []*FeeParam `protobuf:"bytes,4,rep,name=fee_params,json=feeParams,proto3" json:"fee_params,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_149cb69039ffce9f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeRate() int32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func (m *Params) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Params) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Params) GetFeeParams() []*FeeParam {
	if m != nil {
		return m.FeeParams
	}
	return nil
}

// Deprecated: please use the message from v2.
// Defines the accepted fees with corresponding oracle and profit addresses
//
// Deprecated: Do not use.
type FeeParam struct {
	OracleAddress  string         `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	ProfitAddress  string         `protobuf:"bytes,2,opt,name=profit_address,json=profitAddress,proto3" json:"profit_address,omitempty"`
	AcceptedDenoms []*DenomTicker `protobuf:"bytes,3,rep,name=accepted_denoms,json=acceptedDenoms,proto3" json:"accepted_denoms,omitempty"`
}

func (m *FeeParam) Reset()         { *m = FeeParam{} }
func (m *FeeParam) String() string { return proto.CompactTextString(m) }
func (*FeeParam) ProtoMessage()    {}
func (*FeeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_149cb69039ffce9f, []int{1}
}
func (m *FeeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeParam.Merge(m, src)
}
func (m *FeeParam) XXX_Size() int {
	return m.Size()
}
func (m *FeeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeParam.DiscardUnknown(m)
}

var xxx_messageInfo_FeeParam proto.InternalMessageInfo

func (m *FeeParam) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *FeeParam) GetProfitAddress() string {
	if m != nil {
		return m.ProfitAddress
	}
	return ""
}

func (m *FeeParam) GetAcceptedDenoms() []*DenomTicker {
	if m != nil {
		return m.AcceptedDenoms
	}
	return nil
}

// Deprecated: please use the message from v2.
// DenomTicker will be used to define accepted denoms and their ticker
//
// Deprecated: Do not use.
type DenomTicker struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Ticker string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (m *DenomTicker) Reset()         { *m = DenomTicker{} }
func (m *DenomTicker) String() string { return proto.CompactTextString(m) }
func (*DenomTicker) ProtoMessage()    {}
func (*DenomTicker) Descriptor() ([]byte, []int) {
	return fileDescriptor_149cb69039ffce9f, []int{2}
}
func (m *DenomTicker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomTicker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomTicker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomTicker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomTicker.Merge(m, src)
}
func (m *DenomTicker) XXX_Size() int {
	return m.Size()
}
func (m *DenomTicker) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomTicker.DiscardUnknown(m)
}

var xxx_messageInfo_DenomTicker proto.InternalMessageInfo

func (m *DenomTicker) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomTicker) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "nolus.tax.v1beta1.Params")
	proto.RegisterType((*FeeParam)(nil), "nolus.tax.v1beta1.FeeParam")
	proto.RegisterType((*DenomTicker)(nil), "nolus.tax.v1beta1.DenomTicker")
}

func init() { proto.RegisterFile("nolus/tax/v1beta1/params.proto", fileDescriptor_149cb69039ffce9f) }

var fileDescriptor_149cb69039ffce9f = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0x63, 0x18, 0x19, 0x18, 0x01, 0x9b, 0x85, 0xa6, 0x6c, 0xd3, 0x3c, 0x84, 0x84, 0xc4,
	0x0e, 0x24, 0x63, 0xbb, 0x71, 0x99, 0x56, 0x55, 0xad, 0xd4, 0x43, 0x85, 0xa2, 0x9e, 0x7a, 0x41,
	0x8e, 0xf3, 0x42, 0x51, 0x01, 0x47, 0xb6, 0xa9, 0xe8, 0xb7, 0xe8, 0xb1, 0xc7, 0x5e, 0xfa, 0x01,
	0xfa, 0x2d, 0x7a, 0xe4, 0xd8, 0x63, 0x05, 0x5f, 0xa4, 0x8a, 0x9d, 0x54, 0x55, 0xdb, 0x9b, 0xfd,
	0xff, 0xff, 0x5f, 0xde, 0xef, 0xe5, 0x19, 0xd3, 0xa5, 0x98, 0xaf, 0x54, 0xa0, 0xd9, 0x3a, 0xb8,
	0x18, 0x46, 0xa0, 0xd9, 0x30, 0x48, 0x99, 0x64, 0x0b, 0xe5, 0xa7, 0x52, 0x68, 0x41, 0x3e, 0x1b,
	0xdf, 0xd7, 0x6c, 0xed, 0xe7, 0xfe, 0xb7, 0xf6, 0x54, 0x4c, 0x85, 0x71, 0x83, 0xec, 0x64, 0x83,
	0xdd, 0x3b, 0x84, 0xdd, 0xb1, 0xa9, 0x24, 0x5f, 0x71, 0x35, 0x01, 0x98, 0x48, 0xa6, 0xc1, 0x43,
	0x1d, 0xd4, 0xaf, 0x84, 0x1f, 0x13, 0x80, 0x90, 0x69, 0x20, 0xbf, 0xf0, 0x27, 0x2e, 0x96, 0x5a,
	0x32, 0xae, 0x27, 0x2c, 0x8e, 0x25, 0x28, 0xe5, 0x95, 0x3a, 0xa8, 0x5f, 0x0b, 0x5b, 0x85, 0xfe,
	0xdf, 0xca, 0xe4, 0x07, 0xc6, 0x11, 0x53, 0x30, 0x89, 0x61, 0x29, 0x16, 0x5e, 0xd9, 0x84, 0x6a,
	0x99, 0xb2, 0x9f, 0x09, 0x64, 0x84, 0x71, 0xd6, 0xc4, 0xc2, 0x7a, 0x1f, 0x3a, 0xe5, 0x7e, 0xfd,
	0xcf, 0x77, 0xff, 0x0d, 0xad, 0x7f, 0x00, 0x60, 0xb0, 0xc2, 0x5a, 0x92, 0x9f, 0xd4, 0xc8, 0xbd,
	0xbe, 0xf9, 0xe9, 0x78, 0xa8, 0x7b, 0x8b, 0x70, 0xb5, 0xf0, 0x49, 0x0f, 0x37, 0x85, 0x64, 0x7c,
	0x0e, 0xcf, 0x60, 0xc8, 0xf4, 0x6c, 0x58, 0xb5, 0xc0, 0xea, 0xe1, 0x66, 0x2a, 0x45, 0x32, 0x7b,
	0xcd, 0xdf, 0xb0, 0x6a, 0x11, 0x3b, 0xc4, 0x2d, 0xc6, 0x39, 0xa4, 0x1a, 0x62, 0x3b, 0x81, 0xf2,
	0xca, 0x86, 0x91, 0xbe, 0xc3, 0x68, 0x26, 0x3a, 0x99, 0xf1, 0x73, 0x90, 0x61, 0xb3, 0x28, 0x33,
	0xa2, 0x1a, 0x95, 0x3c, 0xd4, 0xfd, 0x87, 0xeb, 0x2f, 0x22, 0xa4, 0x8d, 0x2b, 0xf6, 0xa7, 0x58,
	0x40, 0x7b, 0x21, 0x5f, 0xb0, 0xab, 0x8d, 0x9f, 0x03, 0xe5, 0xb7, 0xec, 0x03, 0x7b, 0x47, 0xf7,
	0x5b, 0x8a, 0x36, 0x5b, 0x8a, 0x1e, 0xb7, 0x14, 0x5d, 0xed, 0xa8, 0xb3, 0xd9, 0x51, 0xe7, 0x61,
	0x47, 0x9d, 0xd3, 0xdf, 0xd3, 0x99, 0x3e, 0x5b, 0x45, 0x3e, 0x17, 0x8b, 0xe0, 0x38, 0x03, 0x1b,
	0x8c, 0xb3, 0x75, 0x72, 0x31, 0x0f, 0x0c, 0xe7, 0x80, 0x0b, 0x09, 0xc1, 0xda, 0x3c, 0x10, 0x7d,
	0x99, 0x82, 0x8a, 0x5c, 0xb3, 0xef, 0xbf, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x56, 0x09,
	0x68, 0x3a, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeParams) > 0 {
		for iNdEx := len(m.FeeParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.FeeRate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedDenoms) > 0 {
		for iNdEx := len(m.AcceptedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProfitAddress) > 0 {
		i -= len(m.ProfitAddress)
		copy(dAtA[i:], m.ProfitAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProfitAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomTicker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomTicker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomTicker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRate != 0 {
		n += 1 + sovParams(uint64(m.FeeRate))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.FeeParams) > 0 {
		for _, e := range m.FeeParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *FeeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProfitAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.AcceptedDenoms) > 0 {
		for _, e := range m.AcceptedDenoms {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *DenomTicker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeParams = append(m.FeeParams, &FeeParam{})
			if err := m.FeeParams[len(m.FeeParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfitAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedDenoms = append(m.AcceptedDenoms, &DenomTicker{})
			if err := m.AcceptedDenoms[len(m.AcceptedDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomTicker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomTicker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomTicker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
